Здачка 1:

Напишите функцию f(s), которая получает на вход строку s из символов 'П' и 'С', обозначающих подъём (П) и спуск (С) на одну условную высоту. Начальная высота — 0.

Нужно вернуть количество участков, где путь возвращается на высоту 0 после движения вверх, но при этом в промежутке никогда не опускался ниже 0.
Объяснение:
• ППСС — цикл на 0, не уходит в минус ⇒ считается (1)
• ПС — 0, но с переходом вниз ⇒ не считается
• остальные — не возвращаются на 0 ⇒ не считаются

Ограничения:
• Нельзя использовать import, списки, множества, классы, глобальные переменные.
• Можно использовать только str, int, range, print, len.

Задачка 2:
Реализуйте короткую функцию f(n) на Python со следующей логикой:
• Если n > 100, функция возвращает n - 10.
• Иначе (то есть при n <= 100), функция возвращает результат f(f(n + 11)) (рекурсивный двойной вызов).

Особенности решения:
• Без ввода данных: все значения (включая исходный n) должны быть заданы в коде как константы.
• Без сторонних библиотек: используйте только стандартный Python (библиотеку math и прочие подключать не нужно).
• Лаконичность кода: постарайтесь уложиться в одну функцию или скрипт до 15 строк.

Задача: Напишите эту функцию f(n) и продемонстрируйте её работу на каком-нибудь тестовом значении, например n = 50. Убедитесь, что функция корректно выполняется и завершается.


Задачка 3:
Реализуйте функцию is_power_of_two(n), которая получает натуральное число n
и возвращает True, если n является точной степенью числа 2 (то есть n = 2^k, где k — целое ≥ 0), иначе Falsе
is_power_of_two(1) # → True (2^0)
is_power_of_two(2) # → True (2^1)
is_power_of_two(3) # → False
is_power_of_two(8) # → True (2^3)
is_power_of_two(10) # → False
Ограничения:
• Запрещено использовать: import, math, , pow(), строки, логарифмы.
• Можно использовать только: int, range, while, print, and, or, not, побитовые операции (&, |, ^, <<, >>).
• Решение должно работать за константное или логарифмическое время, без деления (/, //, % — тоже нельзя).

Задачка 4:
Доработать функцию в задании 3 так, чтобы она возвращала True, если натуральное число n является точной степенью натурального числа k (то есть n = k^m, где m — целое число ≥ 0), иначе False.
is_power(1, 2) # → True (2^0)
is_power(8, 2) # → True (2^3)
is_power(9, 3) # → True (3^2)
is_power(10, 3) # → False
is_power(81, 3) # → True (3^4)
is_power(125, 5) # → True (5^3)
Ограничения:
• Запрещено использовать: import, math, pow, , log, str.
• Нельзя использовать: //, %, / — никаких делений или остатка.
• Разрешено: int, while, if, range, *, ==, !=, print, and, or, not, побитовые операции (&, |, ^, <<, >>).

Задачка 5:
Пять программистов переходят ночью мост. Есть только один фонарик. По мосту могут идти максимум двое одновременно, и обязательно с фонариком. У каждого своя скорость: 1 минута, 2, 4, 7 и 10 минут соответственно. Когда идут вдвоём, двигаются со скоростью более медленного. Как им переправиться всем за минимальное время и чему оно равно?

Задачка 6:
Как разрезать круглый торт тремя прямыми разрезами так, чтобы получилось максимально возможное количество кусочков? Сколько кусочков получится?

Задачка 7:
У вас есть 2 яйца и 100-этажное здание. Как определить минимальное количество бросков, чтобы узнать самый низкий этаж, при падении с которого яйцо разбивается?

Задачка 8:
Стрелочные часы показывают 3:15. Каков угол между минутной и часовой стрелкой?

Задачка 9:
В сумасшедшем доме при выписке наливают ванну воды и дают ложку или кастрюлю на выбор. Что нужно выбрать?

Задачка 10:
Водитель с 40-летним стажем в первый раз сел за компьютер. Через 1 минуту он пожаловался, что мышь неисправна т.к. курсор мыши двигается только вверх и вниз, а вправо и влево нет. Ему произвели замену мыши несколько раз, но ситуация не менялась. Не помогла даже переустановка надежной операционной системы windows. В чем была причина и как ее исправили?